name: Terraform Deployment

on:
  push:
    branches:
      - develop
    paths:
      - terraform/**
  pull_request:
    branches:
      - main
    paths:
      - terraform/**
  workflow_dispatch: # Permite disparo manual do workflow

env:
  # verbosity setting for Terraform logs
  TF_LOG: INFO
  # Credentials for deployment to AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


jobs:
  terraform:
    name: Deploy Terraform
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
        # We keep Terraform files in the terraform directory.
        working-directory: ./terraform

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v4

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.0

      - name: Terraform format
        id: fmt
        run: terraform fmt -check

      - name: Terraform validate
        id: validate
        run: terraform validate


    # strategy:
    #   matrix:
    #     environment: [dev, staging, prod] # Define os ambientes

    # steps:
    #   # 1. Checa o código do repositório
    #   - name: Checkout code
    #     uses: actions/checkout@v3

    #   # 2. Configura o Terraform
    #   - name: Setup Terraform
    #     uses: hashicorp/setup-terraform@v2
    #     with:
    #       terraform_version: 1.10.0

    #   # 3. Carregar JSON do Secret
    #   - name: Load environment variables from JSON
    #     run: |
    #       echo "${{ secrets['JSON_' + matrix.environment | upper] }}" > env.json
    #       cat env.json # Exibe o JSON para debug (opcional)

    #   # 4. Extrair variáveis do JSON
    #   - name: Parse JSON
    #     id: parse_json
    #     run: |
    #       # Faz o parse de todas as chaves e valores do ambiente atual
    #       jq -r ".${{ matrix.environment }} | to_entries | .[]" config.json | while read entry; do
    #         key=$(echo $entry | jq -r '.key')  # Extrai a chave
    #         value=$(echo $entry | jq -r '.value')  # Extrai o valor
    #         echo "Exportando variável: TF_VAR_${key^^}=$value"
    #         echo "TF_VAR_${key^^}=$value" >> $GITHUB_ENV  # Exporta a variável como global
    #       done
    #     # run: |
    #     #     export REGION=$(jq -r '.region' env.json)
    #     #     export INSTANCE_TYPE=$(jq -r '.instance_type' env.json)
    #     #     echo "TF_VAR_REGION=$REGION" >> $GITHUB_ENV
    #     #     echo "TF_VAR_INSTANCE_TYPE=$INSTANCE_TYPE" >> $GITHUB_ENV

    #   # 5. Inicializar o Terraform
    #   - name: Terraform Init
    #     run: terraform init -backend-config="envs/${{ matrix.environment }}/backend.tfvars"

    #   # 6. Planejar a implantação
    #   - name: Terraform Plan
    #     run: terraform plan
    #     env:
    #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    #   # 7. Aplicar as mudanças
    #   - name: Terraform Apply
    #     run: terraform apply -auto-approve
    #     env:
    #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # #   - name: Terraform Plan
    # #     run: terraform plan
    # #     env:
    # #       TF_VAR_REGION: ${{ secrets['TF_VAR_REGION_' + matrix.environment | upper] }}
    # #       TF_VAR_INSTANCE_TYPE: ${{ secrets['TF_VAR_INSTANCE_TYPE_' + matrix.environment | upper] }}
    # #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    # #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # #   # 5. Aplica as mudanças
    # #   - name: Terraform Apply
    # #     run: terraform apply -auto-approve
    # #     env:
    # #       TF_VAR_REGION: ${{ secrets['TF_VAR_REGION_' + matrix.environment | upper] }}
    # #       TF_VAR_INSTANCE_TYPE: ${{ secrets['TF_VAR_INSTANCE_TYPE_' + matrix.environment | upper] }}
    # #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    # #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
